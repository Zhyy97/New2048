{"version":3,"sources":["game.js"],"names":["ROWS","cc","Class","extends","Component","properties","scoreLabel","Label","score","blockPrefab","Prefab","gap","bg","Node","start","drawBgBlocks","init","blockSize","winSize","width","x","y","positions","i","push","j","block","instantiate","height","addChild","setPosition","p","getComponent","setNumber","updateScore","blocks","length","destroy","data","number","string"],"mappings":"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","file":"game.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts(脚本)","sourcesContent":["const ROWS = 4;//在外设定航高数量，之后需要修改就在ROWS后修改行高数就可以，里面的行高数定义为ROWS\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        scoreLabel:cc.Label,\r\n        score:0,//得分\r\n        blockPrefab:cc.Prefab,\r\n        gap:20,//间隔\r\n        bg:cc.Node\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n        this.drawBgBlocks();\r\n        this.init();//初始化【分数归零，清空所有块】\r\n\r\n    },\r\n\r\n    drawBgBlocks () {\r\n        this.blockSize= (cc.winSize.width - this.gap * (ROWS+1)) / ROWS;//第一个小格子\r\n        let x = this.gap + this.blockSize / 2;//X轴的坐标\r\n        let y = this.blockSize;//Y轴的大概坐标\r\n        \r\n        //声明一个数组，把每个格子的位置的储存记起来，之后需要插入/移动到哪个格子的前后左右就不用再去计算一次\r\n        this.positions=[];        \r\n        //绘制剩下的格子，把4x4格子的属性写进去一个for循环里面,生成4x4的小格子\r\n        for (let i = 0; i < ROWS; ++i){\r\n            this.positions.push([0,0,0,0]);//声明数组的值\r\n            for(let j = 0; j < ROWS; ++j){\r\n                let block=cc.instantiate(this.blockPrefab);//画出第一个小格子\r\n                block.width=this.blockSize;\r\n                block.height=this.blockSize;//修改小格子的大小\r\n                this.bg.addChild(block);//添加小格子\r\n                block.setPosition(cc.p(x,y));//确定小格子的位置，这是第一个小格子确定的位置\r\n                this.positions[i][j]=cc.p(x,y);//记下小格子的位置坐标\r\n                x +=this.gap + this.blockSize;//N个新的小格子新生成的x轴的位置【即一个gap空隙＋一个小格子=新的小格子】\r\n                //敲好block.js的代码之后，回来game.js[即此处↓]设置block\r\n                block.getComponent('block').setNumber(0);//获得block.js里面设置的属性，并且定初始数字为0        \r\n            }\r\n            y += this.gap + this.blockSize;//N个新的小格子新生成的y轴的位置【即一个gap空隙＋一个小格子=新的小格子】\r\n\r\n            //画完x轴的小格子后画y轴的，要回到原始的左下角开始往上画，所以定义X回到原始位置\r\n            x =this.gap + this.blockSize / 2;\r\n        }\r\n    \r\n    },\r\n\r\n    init(){\r\n        this.updateScore(0);\r\n\r\n        //把现有的块清掉，即游戏后有颜色的块变为初始化\r\n        //首先先判断是否为空值\r\n        if(this.blocks){\r\n            for (let i=0; i<this.blocks.length; ++i){\r\n                for (let j=0; j<this.blocks[i].length; ++j){\r\n                    if (this.blocks[i][j] !=null){\r\n                        this.blocks[i][j].destroy();\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this.data=[];//data内储存每个block里面的数字，没有挂钩节点，直接清掉\r\n        this.blocks=[];//新建数组\r\n        //初始化data和blocks\r\n        for (let i=0; i<ROWS; ++i){\r\n            this.blocks.push([null,null,null,null]);\r\n            this.data.push([0,0,0,0]);\r\n        }\r\n    },\r\n\r\n    //分数清零初始化\r\n    updateScore(number){\r\n        this.score = number;\r\n        this.scoreLabel.string = '分数:' + number;\r\n    },\r\n});\r\n"]}